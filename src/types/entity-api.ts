import { Api, ApiModules, MutationDefinition, QueryDefinition } from '@reduxjs/toolkit/query/react';
import { EndpointBuilder, EndpointDefinitions, UpdateDefinitions } from '@reduxjs/toolkit/src/query';
import { NoInfer } from '@reduxjs/toolkit/src/query/tsHelpers';
import { BaseEntity, EntityRequest, PaginationRequest, PaginationResponse } from '../models';
import { BaseQueryFunction } from '../utils';
import { EntityApiCustomHooks } from './custom-hooks';
import { EntityApiUtils } from './entity-api-utils';
import { EntityPartial } from './entity-partial';

export type EntityEndpointsDefinitions<
  TEntity extends BaseEntity,
  TSearchRequest extends object = PaginationRequest,
  TEntityRequest extends object = EntityRequest,
  TSearchResponse extends PaginationResponse<TEntity> = PaginationResponse<TEntity>,
> = {
  create: MutationDefinition<Partial<TEntity>, BaseQueryFunction, string, TEntity>;
  search: QueryDefinition<TSearchRequest, BaseQueryFunction, string, TSearchResponse>;
  searchInfinite: QueryDefinition<TSearchRequest, BaseQueryFunction, string, TSearchResponse & { minPage?: number }>;
  get: QueryDefinition<{ id: TEntity['id']; params?: TEntityRequest }, BaseQueryFunction, string, TEntity>;
  update: MutationDefinition<EntityPartial<TEntity>, BaseQueryFunction, string, EntityPartial<TEntity>>;
  delete: MutationDefinition<number, BaseQueryFunction, string, void>;
};

/**
 * Creates an entity API with specified options.
 *
 * @template TEntity - The entity model class constructor.
 * @template TSearchRequest - The search request class constructor. Defaults to PaginationRequest.
 * @template TEntityRequest - The get request class constructor. Defaults to EntityRequest.
 * @template TSearchResponse - The search response class constructor. Defaults to PaginationResponse.
 * @template TOmitEndpoints - The array of endpoint names to omit(from predefined endpoints). Defaults to never.
 * @param {Object} options - The options object.
 * @param {string} options.entityName - An entity name. Must be unique.
 * @param {string} options.baseEndpoint - Endpoint, relative to base URL configured in the API creator.
 * @param {ReturnType<typeof createApiCreator> | undefined} [options.baseApiCreator] - The APIs creator generated by `createApiCreator` that shares configuration for new APIs.
 * @param {BaseQueryFunction | undefined} [options.baseQuery] - The base query function.
 * @param {ClassConstructor<TEntity>} options.entityConstructor - The entity model class constructor.
 * @param {ClassConstructor<TSearchRequest> | typeof PaginationRequest} [options.entitySearchRequestConstructor=PaginationRequest] - The search request class constructor.
 * @param {ClassConstructor<TEntityRequest> | typeof EntityRequest} [options.entityGetRequestConstructor=EntityRequest] - The get request class constructor.
 * @param {ClassConstructor<TSearchResponse> | typeof PaginationResponse} [options.entitySearchResponseConstructor=PaginationResponse] - The search response class constructor.
 * @param {Array<EntityEndpointName>} [options.omitEndpoints] - The array of endpoints to omit.
 * @param {((item: TEntity) => string | number) | undefined} [options.getEntityId=((item) => item.id)] - The function to get entity id.
 * @param {((pagination: Pagination, request: TSearchRequest) => number) | undefined} [options.getCurrentPage=((pagination) => pagination.currentPage)] - The function to get current page.
 * @returns {Omit<EntityApi<TEntity, TSearchRequest, TEntityRequest, TSearchResponse, typeof omitEndpoints>, keyof EntityApiCustomHooks> & EntityApiCustomHooks<TEntity, TSearchRequest, TSearchResponse>} The entity API.
 */
export type EntityApi<
  TEntity extends BaseEntity,
  TSearchRequest extends object = PaginationRequest,
  TEntityRequest extends object = EntityRequest,
  TSearchResponse extends PaginationResponse<TEntity> = PaginationResponse<TEntity>,
  TOmitEndpoints extends Readonly<Array<EntityEndpointName>> | void = never,
  TEndpointDefinitions extends Partial<
    EntityEndpointsDefinitions<TEntity, TSearchRequest, TEntityRequest, TSearchResponse>
  > = Omit<
    EntityEndpointsDefinitions<TEntity, TSearchRequest, TEntityRequest, TSearchResponse>,
    TOmitEndpoints extends Readonly<Array<EntityEndpointName>> ? TOmitEndpoints[number] : never
  >,
> = Omit<
  Api<
    BaseQueryFunction,
    TEndpointDefinitions,
    string,
    string,
    keyof ApiModules<BaseQueryFunction, TEndpointDefinitions, string, string>
  >,
  'injectEndpoints' | 'enhanceEndpoints'
> & {
  injectEndpoints<TNewDefinitions extends EndpointDefinitions>(_: {
    endpoints: (build: EndpointBuilder<BaseQueryFunction, string, string>) => TNewDefinitions;
    overrideExisting?: boolean;
  }): Omit<
    EntityApi<
      TEntity,
      TSearchRequest,
      TEntityRequest,
      TSearchResponse,
      TOmitEndpoints,
      TEndpointDefinitions & TNewDefinitions
    >,
    keyof EntityApiCustomHooks
  > &
    EntityApiCustomHooks<TEntity, TSearchRequest, TSearchResponse>;

  enhanceEndpoints<TNewTagTypes extends string = never, TNewDefinitions extends EndpointDefinitions = never>(_: {
    addTagTypes?: Array<TNewTagTypes>;
    endpoints?: UpdateDefinitions<
      TEndpointDefinitions,
      string | NoInfer<TNewTagTypes>,
      TNewDefinitions
    > extends infer NewDefinitions
      ? {
          [K in keyof NewDefinitions]?: Partial<NewDefinitions[K]> | ((definition: NewDefinitions[K]) => void);
        }
      : never;
  }): Omit<
    EntityApi<
      TEntity,
      TSearchRequest,
      TEntityRequest,
      TSearchResponse,
      TOmitEndpoints,
      TEndpointDefinitions | TNewDefinitions
    >,
    keyof EntityApiCustomHooks
  > &
    EntityApiCustomHooks<TEntity, TSearchRequest, TSearchResponse>;
} & { util: EntityApiUtils<TEntity, TSearchRequest> };

export type EntityEndpointName = keyof EntityEndpointsDefinitions<BaseEntity>;
export type EntityQueryEndpointName = Exclude<EntityEndpointName, 'create' | 'update' | 'delete'>;
export type EntityMutationEndpointName = Exclude<EntityEndpointName, EntityQueryEndpointName>;
